<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/python
# encoding: utf-8

import unicodedata
import sys
import os
import codecs

sys.stdout = codecs.getwriter('utf-8')(sys.stdout)
sys.stdin  = codecs.getreader('utf-8')(sys.stdin)

bundleLibPath = os.environ["TM_BUNDLE_SUPPORT"] + "/lib/"

def lastCharInUCSdec(s):
    if s:
        if u"\udc00" &lt;= s[-1] &lt;= u"\udfff" and len(s) &gt;= 2 and u"\ud800" &lt;= s[-2] &lt;= u"\udbff":
            return ((ord(s[-2])&amp;0x3ff)&lt;&lt;10 | (ord(s[-1])&amp;0x3ff)) + 0x10000
        return ord(s[-1])
    return -1

def codepoints(s):
    hs = 0
    for c in s:
        c = ord(c)
        if 0xdc00 &lt;= c &lt;= 0xdfff and hs:
            yield ((hs&amp;0x3ff)&lt;&lt;10 | (c&amp;0x3ff)) + 0x10000
            hs = 0
        elif 0xd800 &lt;= c &lt;= 0xdbff:
            hs = c
        else:
            yield c
    if hs:
        yield hs

def rangeName(dec):
    if 0x3400 &lt;= dec &lt;= 0x4DB5:
        return  "CJK UNIFIED IDEOGRAPH" + "-%04X" % dec
    elif 0x4E00 &lt;= dec &lt;= 0x9FC3:
        return  "CJK UNIFIED IDEOGRAPH" + "-%04X" % dec
    elif 0xAC00 &lt;= dec &lt;= 0xD7A3: # Hangul
        return  unicodedata.name(unichr(dec), "U+%04X" % dec)
    elif 0xD800 &lt;= dec &lt;= 0xDB7F:
        return  "Non Private Use High Surrogate"
    elif 0xDB80 &lt;= dec &lt;= 0xDBFF:
        return  "Private Use High Surrogate"
    elif 0xDC00 &lt;= dec &lt;= 0xDFFF:
        return  "Low Surrogate"
    elif 0xE000 &lt;= dec &lt;= 0xF8FF:
        return  "Private Use"
    elif 0x20000 &lt;= dec &lt;= 0x2A6D6:
        return  "CJK UNIFIED IDEOGRAPH" + "-%04X" % dec
    elif 0xF0000 &lt;= dec &lt;= 0xFFFFD:
        return  "Plane 15 Private Use"
    elif 0x100000 &lt;= dec &lt;= 0x10FFFD:
        return  "Plane 16 Private Use"
    else:
        return  "not defined"
    

def getUnicodeName(dec):
    regExp = []
    for c in dec:
        hexCode = "%04X" % int(c)
        regExp.append(hexCode)
    UnicodeData = os.popen("zgrep -E '^(" + "|".join(regExp) + ");' '" + bundleLibPath + "UnicodeData.txt.zip'").read().decode("UTF-8")
    data = {}
    for c in UnicodeData.split('\n'):
        uniData = c.strip().split(';')
        if len(uniData) &gt; 1:
            data[uniData[0]] = uniData[1]
    for c in dec:
        if c != 10:
            try:
                name = data["%04X" % int(c)]
            except:
                name = rangeName(c)
            if name[0] == '&lt;':
                name = rangeName(c)
            if c == 9:
                char = ""
            else:
                char = eval('u"\U%08X"' % c)
            t = ""
            if "COMBINING" in name: t = u"â—Œ"
            print "%s%s\t: U+%04X\t: %-11s\t: %s" % (t, char, int(c), " ".join([hex(ord(c))[2:].upper() for c in char.encode("utf-8")]), name)
    sys.exit(206)

if "TM_SELECTED_TEXT" in os.environ:
    getUnicodeName(list(codepoints(unicode(os.environ["TM_SELECTED_TEXT"], "UTF-8"))))
else:
    line, x = os.environ["TM_CURRENT_LINE"], int(os.environ["TM_LINE_INDEX"])
    if not x: sys.exit(200)
    getUnicodeName([lastCharInUCSdec(unicode(line[:x], "UTF-8"))])
</string>
	<key>fallbackInput</key>
	<string>none</string>
	<key>input</key>
	<string>selection</string>
	<key>keyEquivalent</key>
	<string>^~@u</string>
	<key>name</key>
	<string>Show Unicode Name(s)</string>
	<key>output</key>
	<string>showAsTooltip</string>
	<key>uuid</key>
	<string>13FB5612-63F9-4FE5-B43C-ACB0E45B7386</string>
</dict>
</plist>
